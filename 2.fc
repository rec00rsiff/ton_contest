int equal_slices (slice a, slice b) asm "SDEQ";

slice load_data () inline {
  var ds = get_data().begin_parse();
  return ds~load_msg_addr();
}

slice parse_sender_address (cell in_msg_full) inline {
  var cs = in_msg_full.begin_parse();
  var flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();
  return sender_address;
}

;; testable
() recv_internal (int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice sender_address = parse_sender_address(in_msg_full);
  slice owner_address = load_data();

  throw_if(500, equal_slices(sender_address, owner_address));

    var msg = begin_cell()
          .store_uint(0x10, 6) ;;no bounce
          .store_slice(owner_address)
          .store_uint(0, 5 + 4 + 4 + 64 + 32 + 1 + 1) ;; 4(grams) + 1
          .store_slice(sender_address)
          .store_ref(begin_cell().store_slice(in_msg_body).end_cell())
        .end_cell();
     send_raw_message(msg, 64);

  }
