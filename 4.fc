(cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    if (ds.slice_bits() == 0) {
        return (new_dict(), new_dict());
    } else {
        return (ds~load_dict(), ds~load_dict());
    }
}

() save_data(cell data_dict, cell valid_until_dict) impure inline {
    set_data(begin_cell().store_dict(data_dict).store_dict(valid_until_dict).end_cell());
}

;; testable
() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) {

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (cell data_dict, cell valid_until_dict) = load_data();

    if (op == 1) { ;; add new entry

      int key = in_msg_body~load_uint(256);

      int valid_until = in_msg_body~load_uint(64);

      slice value = in_msg_body;

      data_dict~udict_set_ref(256, key, begin_cell().store_slice(value).end_cell());

      valid_until_dict~udict_set_builder(256, key, begin_cell().store_uint(valid_until, 64));

      save_data(data_dict, valid_until_dict);
      return ();
    }

    if (op == 2) { ;; remove outdated

        int key = -1;
         do {
           (key, slice cs, int f) = valid_until_dict.udict_get_next?(256, key);
           if (f) {
              int valid_until = cs~load_uint(64);
              if (valid_until < now()) {
                valid_until_dict~udict_delete?(256, key);
                data_dict~udict_delete?(256, key);
              }
           }
         } until (~ f);

         save_data(data_dict, valid_until_dict);
         return ();
    }

    throw(500);
}

;; testable
(int, slice) get_key(int key) method_id {
    (cell data_dict, cell valid_until_dict) = load_data();

    (slice vu_dat, int f) = valid_until_dict.udict_get?(256, key);
    if(f) {
        int valid_until = vu_dat~load_uint(64);

        (cell val_dat, int f) = data_dict.udict_get_ref?(256, key);
        slice value = val_dat.begin_parse();

        return (valid_until, value);
    }


    throw(501);

    return (null(), null());
}
