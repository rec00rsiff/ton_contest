;; testable
cell pack_data(int public_key1, int public_key2) method_id {
    return (begin_cell().store_uint(public_key1, 256).store_uint(public_key2, 256).store_dict(new_dict()).store_dict(new_dict()).store_dict(new_dict()).end_cell());
}

() recv_internal(slice in_msg) impure {
  ;; ignore
}

;; testable
() recv_external (slice in_msg_body) {
    var public_key = in_msg_body~load_uint(256);

    slice data_slice = get_data().begin_parse();

    int pkey1 = data_slice~load_uint(256);
    int pkey2 = data_slice~load_uint(256);

    throw_unless(500, ( (public_key == pkey1) | (public_key == pkey2) ) ) ;

    var signature = in_msg_body~load_bits(512);

    slice req = in_msg_body~load_ref().begin_parse();
    var req_hash = slice_hash(req);

    throw_unless(501, check_signature(req_hash, signature, public_key));

    var valid_until = req~load_uint(32);

    throw_if(502, valid_until < now());

    ;;ttl clamp, optional
    if(valid_until - now() > 64) {
        valid_until = now() + 64;
    }

    cell sent_dict1 = data_slice~load_dict();
    cell sent_dict2 = data_slice~load_dict();

    if(public_key == pkey1) {
        (slice rdat, int f) = sent_dict1.udict_get?(256, req_hash);
        throw_if(503, f);

        sent_dict1~udict_set_builder(256, req_hash, begin_cell().store_uint(0, 1));
    }
    else {
        (slice rdat, int f) = sent_dict2.udict_get?(256, req_hash);
        throw_if(503, f);

        sent_dict2~udict_set_builder(256, req_hash, begin_cell().store_uint(0, 1));
    }

    accept_message();

    cell pdict = data_slice~load_dict();

    (slice rdat, int f) = pdict.udict_get?(256, req_hash);
    if(f) {
        var mode = req~load_uint(8);

        var msg_to_send = req~load_ref();

        send_raw_message(msg_to_send, mode);

        pdict~udict_delete?(256, req_hash);
    }
    else {
        pdict~udict_set_builder(256, req_hash, begin_cell().store_uint(valid_until, 32));
    }

    int key = -1;
        do {
           (key, slice cs, int f) = pdict.udict_get_next?(256, key);
           if (f) {
              int valid_until = cs~load_uint(32);
              if (valid_until < now()) {
                pdict~udict_delete?(256, key);
              }
           }
         } until (~ f);

    set_data(begin_cell().store_uint(pkey1, 256).store_uint(pkey2, 256).store_dict(sent_dict1).store_dict(sent_dict2).store_dict(pdict).end_cell());
}
